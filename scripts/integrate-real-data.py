#!/usr/bin/env python3
"""
Script para demonstrar integra√ß√£o com dados reais (GTFS + OpenStreetMap)
"""
import sys
import os
import asyncio
import logging
from pathlib import Path

# Adicionar o diret√≥rio pai ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

from integration.data_integrator import DataIntegrator, CITY_BOUNDS, GTFS_SOURCES
from integration.gtfs_processor import GTFSProcessor
from integration.osm_processor import OSMProcessor

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def demonstrate_gtfs_integration():
    """Demonstra integra√ß√£o com dados GTFS"""
    print("\nüöå === DEMONSTRA√á√ÉO DE INTEGRA√á√ÉO GTFS ===")
    
    # Exemplo com Belo Horizonte (dados p√∫blicos)
    city_name = "belo_horizonte"
    
    if city_name not in GTFS_SOURCES:
        print(f"‚ùå Dados GTFS n√£o dispon√≠veis para {city_name}")
        return
    
    try:
        print(f"üì• Baixando dados GTFS para {city_name}...")
        
        # Criar processador GTFS
        gtfs_processor = GTFSProcessor()
        
        # Baixar dados (simula√ß√£o - em produ√ß√£o usaria URL real)
        print("‚ö†Ô∏è  Nota: Em produ√ß√£o, isso baixaria dados reais de:")
        print(f"   {GTFS_SOURCES[city_name]}")
        
        # Simular processamento com dados de exemplo
        print("üìä Processando dados GTFS...")
        
        # Criar dados de exemplo
        from integration.gtfs_processor import GTFSStop, GTFSRoute, GTFSTrip, GTFSStopTime
        
        # Adicionar algumas paradas de exemplo
        stops = [
            GTFSStop("ST001", "Esta√ß√£o Central", -19.9167, -43.9345, "station"),
            GTFSStop("ST002", "Pra√ßa da Liberdade", -19.9317, -43.9378, "stop"),
            GTFSStop("ST003", "Mercado Central", -19.9200, -43.9400, "stop"),
            GTFSStop("ST004", "Terminal Rodovi√°rio", -19.9100, -43.9300, "station"),
            GTFSStop("ST005", "Shopping Center", -19.9250, -43.9450, "stop")
        ]
        
        for stop in stops:
            gtfs_processor.stops[stop.stop_id] = stop
        
        # Adicionar rotas de exemplo
        routes = [
            GTFSRoute("R001", "1001", "Circular Centro", 3),  # Bus
            GTFSRoute("R002", "M1", "Metr√¥ Linha 1", 1),      # Metro
            GTFSRoute("R003", "2001", "Expresso Norte", 3)    # Bus
        ]
        
        for route in routes:
            gtfs_processor.routes[route.route_id] = route
        
        print(f"‚úÖ Processados {len(gtfs_processor.stops)} paradas e {len(gtfs_processor.routes)} rotas")
        
        # Converter para formato Conneccity
        nodes, edges = gtfs_processor.convert_to_conneccity_format()
        
        print(f"üîÑ Convertidos para {len(nodes)} n√≥s e {len(edges)} arestas Conneccity")
        
        # Mostrar exemplo de dados
        if nodes:
            print("\nüìã Exemplo de n√≥ GTFS convertido:")
            print(f"   {nodes[0]}")
        
        if edges:
            print("\nüõ£Ô∏è  Exemplo de aresta GTFS convertida:")
            print(f"   {edges[0]}")
        
        return gtfs_processor
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o GTFS: {str(e)}")
        return None

async def demonstrate_osm_integration():
    """Demonstra integra√ß√£o com dados OpenStreetMap"""
    print("\nüó∫Ô∏è  === DEMONSTRA√á√ÉO DE INTEGRA√á√ÉO OSM ===")
    
    city_name = "belo_horizonte"
    
    if city_name not in CITY_BOUNDS:
        print(f"‚ùå Bounds n√£o dispon√≠veis para {city_name}")
        return
    
    try:
        print(f"üì• Obtendo dados OSM para {city_name}...")
        print(f"üìç Bbox: {CITY_BOUNDS[city_name]}")
        
        # Criar processador OSM
        osm_processor = OSMProcessor()
        
        # Em produ√ß√£o, isso faria uma requisi√ß√£o real para Overpass API
        print("‚ö†Ô∏è  Nota: Em produ√ß√£o, isso faria requisi√ß√£o real para Overpass API")
        print("   Exemplo de query Overpass QL:")
        print("   [out:xml][timeout:300];")
        print("   (way[\"highway\"~\"^(primary|secondary|tertiary|residential)$\"](bbox);")
        print("    node[\"public_transport\"=\"stop_position\"](bbox););")
        print("   out geom;")
        
        # Simular dados OSM
        print("üìä Simulando dados OSM...")
        
        from integration.osm_processor import OSMNode, OSMWay
        
        # Criar n√≥s de exemplo
        nodes = [
            OSMNode("N001", -19.9167, -43.9345, {"public_transport": "stop_position", "name": "Parada Central"}),
            OSMNode("N002", -19.9317, -43.9378, {"railway": "station", "name": "Esta√ß√£o Liberdade"}),
            OSMNode("N003", -19.9200, -43.9400, {"highway": "bus_stop", "name": "Mercado Central"})
        ]
        
        for node in nodes:
            osm_processor.nodes[node.id] = node
        
        # Criar vias de exemplo
        ways = [
            OSMWay("W001", ["N001", "N002"], {
                "highway": "primary",
                "surface": "asphalt",
                "wheelchair": "yes",
                "smoothness": "good"
            }),
            OSMWay("W002", ["N002", "N003"], {
                "highway": "secondary",
                "surface": "concrete",
                "wheelchair": "no",
                "smoothness": "bad"
            }),
            OSMWay("W003", ["N001", "N003"], {
                "highway": "steps",
                "surface": "stone",
                "wheelchair": "no"
            })
        ]
        
        for way in ways:
            osm_processor.ways[way.id] = way
        
        print(f"‚úÖ Processados {len(osm_processor.nodes)} n√≥s e {len(osm_processor.ways)} vias OSM")
        
        # Executar an√°lises
        print("\nüîç Executando an√°lises OSM...")
        
        accessibility = osm_processor.analyze_accessibility()
        surface_quality = osm_processor.analyze_surface_quality()
        flood_risk = osm_processor.analyze_flood_risk()
        
        print(f"‚ôø Acessibilidade: {accessibility['accessible_ways']} vias acess√≠veis")
        print(f"üõ£Ô∏è  Qualidade de superf√≠cie: {len(surface_quality['good_surfaces'])} vias boas")
        print(f"üåä Risco de alagamento: {len(flood_risk['flood_prone_areas'])} √°reas de risco")
        
        # Converter para formato Conneccity
        edges = osm_processor.convert_to_conneccity_edges()
        print(f"üîÑ Convertidos para {len(edges)} arestas Conneccity")
        
        if edges:
            print("\nüõ£Ô∏è  Exemplo de aresta OSM convertida:")
            print(f"   {edges[0]}")
        
        return osm_processor
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o OSM: {str(e)}")
        return None

async def demonstrate_data_integration():
    """Demonstra integra√ß√£o completa de dados"""
    print("\nüîó === DEMONSTRA√á√ÉO DE INTEGRA√á√ÉO COMPLETA ===")
    
    try:
        # Criar integrador
        integrator = DataIntegrator()
        
        print("üìä Integrando dados GTFS e OSM...")
        
        # Simular integra√ß√£o (em produ√ß√£o usaria dados reais)
        city_name = "belo_horizonte"
        
        # Simular dados integrados
        from integration.data_integrator import IntegratedNode, IntegratedEdge
        
        # Criar n√≥s integrados
        nodes = [
            IntegratedNode("INT001", "Esta√ß√£o Central Integrada", -19.9167, -43.9345, "metro",
                          gtfs_data={"wheelchair_accessible": True},
                          osm_data={"wheelchair": "yes"},
                          accessibility_score=0.9, flood_risk=0),
            IntegratedNode("INT002", "Parada Liberdade", -19.9317, -43.9378, "onibus",
                          gtfs_data={"wheelchair_accessible": False},
                          osm_data={"wheelchair": "no"},
                          accessibility_score=0.2, flood_risk=0),
            IntegratedNode("INT003", "Mercado Central", -19.9200, -43.9400, "onibus",
                          gtfs_data={"wheelchair_accessible": True},
                          osm_data={"surface": "asphalt"},
                          accessibility_score=0.7, flood_risk=1)
        ]
        
        for node in nodes:
            integrator.integrated_nodes[node.id] = node
        
        # Criar arestas integradas
        edges = [
            IntegratedEdge("INT001", "INT002", 5.0, 1, 0, 0, 0, "metro",
                          gtfs_data={"source": "gtfs"},
                          osm_data={"surface": "asphalt"},
                          confidence_score=0.95),
            IntegratedEdge("INT002", "INT003", 8.0, 0, 0, 1, 0, "pe",
                          gtfs_data=None,
                          osm_data={"surface": "gravel", "smoothness": "bad"},
                          confidence_score=0.8),
            IntegratedEdge("INT001", "INT003", 12.0, 0, 1, 0, 1, "pe",
                          gtfs_data=None,
                          osm_data={"highway": "steps", "flood_prone": "yes"},
                          confidence_score=0.7)
        ]
        
        integrator.integrated_edges = edges
        
        print(f"‚úÖ Integrados {len(integrator.integrated_nodes)} n√≥s e {len(integrator.integrated_edges)} arestas")
        
        # Mostrar resumo
        summary = integrator.get_integration_summary()
        print(f"\nüìà Resumo da integra√ß√£o:")
        print(f"   ‚Ä¢ Total de n√≥s: {summary['total_nodes']}")
        print(f"   ‚Ä¢ Total de arestas: {summary['total_edges']}")
        print(f"   ‚Ä¢ Paradas acess√≠veis: {summary['accessible_stops']}")
        print(f"   ‚Ä¢ √Åreas de risco de alagamento: {summary['flood_risk_areas']}")
        
        # Mostrar exemplos
        if integrator.integrated_nodes:
            print(f"\nüìã Exemplo de n√≥ integrado:")
            node = list(integrator.integrated_nodes.values())[0]
            print(f"   ID: {node.id}")
            print(f"   Nome: {node.name}")
            print(f"   Tipo: {node.tipo}")
            print(f"   Score de acessibilidade: {node.accessibility_score}")
            print(f"   Risco de alagamento: {node.flood_risk}")
            print(f"   Tem dados GTFS: {node.gtfs_data is not None}")
            print(f"   Tem dados OSM: {node.osm_data is not None}")
        
        if integrator.integrated_edges:
            print(f"\nüõ£Ô∏è  Exemplo de aresta integrada:")
            edge = integrator.integrated_edges[0]
            print(f"   De: {edge.from_id} ‚Üí Para: {edge.to_id}")
            print(f"   Tempo: {edge.tempo_min} min")
            print(f"   Modo: {edge.modo}")
            print(f"   Escada: {edge.escada}, Cal√ßada ruim: {edge.calcada_ruim}, Risco alagamento: {edge.risco_alag}")
            print(f"   Score de confian√ßa: {edge.confidence_score}")
        
        return integrator
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o completa: {str(e)}")
        return None

async def demonstrate_api_endpoints():
    """Demonstra endpoints da API para dados reais"""
    print("\nüåê === DEMONSTRA√á√ÉO DE ENDPOINTS DA API ===")
    
    print("üì° Endpoints dispon√≠veis para dados reais:")
    print("   GET  /real-data/cities/available")
    print("   POST /real-data/integrate/{city_name}")
    print("   GET  /real-data/integration/status/{city_name}")
    print("   GET  /real-data/gtfs/stops/{city_name}")
    print("   GET  /real-data/gtfs/routes/{city_name}")
    print("   GET  /real-data/osm/analysis/{city_name}")
    print("   GET  /real-data/integrated/nodes/{city_name}")
    print("   GET  /real-data/integrated/edges/{city_name}")
    print("   GET  /real-data/accessibility/report/{city_name}")
    
    print("\nüí° Exemplos de uso:")
    print("   # Listar cidades dispon√≠veis")
    print("   curl http://localhost:8080/real-data/cities/available")
    print()
    print("   # Integrar dados de Belo Horizonte")
    print("   curl -X POST http://localhost:8080/real-data/integrate/belo_horizonte")
    print()
    print("   # Obter paradas GTFS")
    print("   curl http://localhost:8080/real-data/gtfs/stops/belo_horizonte?limit=10")
    print()
    print("   # Relat√≥rio de acessibilidade")
    print("   curl http://localhost:8080/real-data/accessibility/report/belo_horizonte")

async def main():
    """Fun√ß√£o principal"""
    print("üöÄ === DEMONSTRA√á√ÉO DE INTEGRA√á√ÉO COM DADOS REAIS ===")
    print("   GTFS (General Transit Feed Specification)")
    print("   OpenStreetMap (OSM)")
    print("   Conneccity API")
    
    # Demonstrar integra√ß√£o GTFS
    gtfs_processor = await demonstrate_gtfs_integration()
    
    # Demonstrar integra√ß√£o OSM
    osm_processor = await demonstrate_osm_integration()
    
    # Demonstrar integra√ß√£o completa
    integrator = await demonstrate_data_integration()
    
    # Demonstrar endpoints da API
    await demonstrate_api_endpoints()
    
    print("\n‚úÖ === DEMONSTRA√á√ÉO CONCLU√çDA ===")
    print("üéØ Pr√≥ximos passos:")
    print("   1. Configurar URLs reais de dados GTFS")
    print("   2. Ajustar bounding boxes para cidades espec√≠ficas")
    print("   3. Implementar cache para dados OSM")
    print("   4. Adicionar valida√ß√£o de dados")
    print("   5. Implementar atualiza√ß√£o autom√°tica de dados")
    
    print("\nüìö Recursos √∫teis:")
    print("   ‚Ä¢ GTFS: https://gtfs.org/")
    print("   ‚Ä¢ OpenStreetMap: https://www.openstreetmap.org/")
    print("   ‚Ä¢ Overpass API: https://overpass-api.de/")
    print("   ‚Ä¢ Belo Horizonte GTFS: https://ckan.pbh.gov.br/dataset/gtfs")

if __name__ == "__main__":
    asyncio.run(main())
