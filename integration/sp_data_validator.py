#!/usr/bin/env python3
"""
Validador de dados espec√≠ficos de S√£o Paulo para Conneccity
"""
import asyncio
import json
import logging
import math
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple, Set
from dataclasses import dataclass, field
from enum import Enum
import aiohttp

logger = logging.getLogger(__name__)

class ValidationLevel(Enum):
    """N√≠veis de valida√ß√£o"""
    STRICT = "strict"
    MODERATE = "moderate"
    LENIENT = "lenient"

class ValidationResult:
    """Resultado de valida√ß√£o"""
    def __init__(self):
        self.errors: List[str] = []
        self.warnings: List[str] = []
        self.info: List[str] = []
        self.score: float = 0.0
        self.valid: bool = True
    
    def add_error(self, message: str):
        """Adiciona erro"""
        self.errors.append(message)
        self.valid = False
    
    def add_warning(self, message: str):
        """Adiciona warning"""
        self.warnings.append(message)
    
    def add_info(self, message: str):
        """Adiciona informa√ß√£o"""
        self.info.append(message)
    
    def calculate_score(self) -> float:
        """Calcula score de valida√ß√£o"""
        total_checks = len(self.errors) + len(self.warnings) + len(self.info)
        if total_checks == 0:
            return 1.0
        
        error_weight = 0.0
        warning_weight = 0.5
        info_weight = 1.0
        
        score = (
            (len(self.info) * info_weight + 
             len(self.warnings) * warning_weight + 
             len(self.errors) * error_weight) / 
            (total_checks * info_weight)
        )
        
        self.score = max(0.0, min(1.0, score))
        return self.score

@dataclass
class ValidationRule:
    """Regra de valida√ß√£o"""
    name: str
    description: str
    level: ValidationLevel
    weight: float = 1.0
    enabled: bool = True

@dataclass
class SPBounds:
    """Limites geogr√°ficos de S√£o Paulo"""
    min_lat: float = -23.8
    max_lat: float = -23.4
    min_lon: float = -46.8
    max_lon: float = -46.3
    
    def contains(self, lat: float, lon: float) -> bool:
        """Verifica se coordenadas est√£o dentro dos limites"""
        return (self.min_lat <= lat <= self.max_lat and 
                self.min_lon <= lon <= self.max_lon)

class SPDataValidator:
    """
    Validador de dados espec√≠ficos de S√£o Paulo
    """
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        
        # Limites de S√£o Paulo
        self.sp_bounds = SPBounds()
        
        # N√≠veis de valida√ß√£o
        self.validation_level = ValidationLevel(
            self.config.get('validation_level', 'moderate')
        )
        
        # Regras de valida√ß√£o
        self.validation_rules = self._load_validation_rules()
        
        # Dados de refer√™ncia
        self.reference_data = self._load_reference_data()
        
        # Configura√ß√µes espec√≠ficas
        self.gtfs_validation_config = {
            'min_stop_name_length': 3,
            'max_coordinate_error': 0.01,  # ~1km
            'required_stop_fields': ['stop_id', 'stop_name', 'stop_lat', 'stop_lon'],
            'required_route_fields': ['route_id', 'route_short_name', 'route_long_name']
        }
        
        self.osm_validation_config = {
            'min_way_length': 10,  # metros
            'max_way_length': 50000,  # metros
            'required_way_tags': ['highway'],
            'accessibility_tags': ['wheelchair', 'tactile_paving', 'kerb']
        }
        
        # Estat√≠sticas
        self.validation_stats = {
            'total_validations': 0,
            'successful_validations': 0,
            'failed_validations': 0,
            'avg_score': 0.0
        }
        
        logger.info("‚úÖ SP Data Validator inicializado")
    
    def _load_validation_rules(self) -> List[ValidationRule]:
        """Carrega regras de valida√ß√£o"""
        rules = [
            ValidationRule(
                name="geographic_bounds",
                description="Verifica se dados est√£o dentro dos limites de SP",
                level=ValidationLevel.STRICT,
                weight=2.0
            ),
            ValidationRule(
                name="data_completeness",
                description="Verifica completude dos dados obrigat√≥rios",
                level=ValidationLevel.STRICT,
                weight=1.5
            ),
            ValidationRule(
                name="coordinate_accuracy",
                description="Verifica precis√£o das coordenadas",
                level=ValidationLevel.MODERATE,
                weight=1.0
            ),
            ValidationRule(
                name="accessibility_consistency",
                description="Verifica consist√™ncia dos dados de acessibilidade",
                level=ValidationLevel.MODERATE,
                weight=1.0
            ),
            ValidationRule(
                name="naming_conventions",
                description="Verifica conven√ß√µes de nomenclatura",
                level=ValidationLevel.LENIENT,
                weight=0.5
            )
        ]
        
        return rules
    
    def _load_reference_data(self) -> Dict[str, Any]:
        """Carrega dados de refer√™ncia"""
        return {
            'known_stops': self._load_known_stops(),
            'known_routes': self._load_known_routes(),
            'accessibility_features': self._load_accessibility_features(),
            'geographic_landmarks': self._load_geographic_landmarks()
        }
    
    def _load_known_stops(self) -> Set[str]:
        """Carrega paradas conhecidas de SP"""
        # Paradas principais de SP (exemplos)
        return {
            'S√©', 'Paulista', 'Trianon-MASP', 'Bandeira', 'Ibirapuera',
            'Vila Madalena', 'Pinheiros', 'Itaim Bibi', 'Vila Ol√≠mpia',
            'Centro', 'Liberdade', 'Bela Vista', 'Consola√ß√£o', 'Higien√≥polis'
        }
    
    def _load_known_routes(self) -> Set[str]:
        """Carrega rotas conhecidas de SP"""
        # Rotas principais de SP (exemplos)
        return {
            '107P', '107T', '107C', '107N', '107R',  # Linha 107
            '175P', '175T', '175C', '175N', '175R',  # Linha 175
            'Metr√¥ Linha 1', 'Metr√¥ Linha 2', 'Metr√¥ Linha 3',
            'Metr√¥ Linha 4', 'Metr√¥ Linha 5', 'CPTM'
        }
    
    def _load_accessibility_features(self) -> Set[str]:
        """Carrega caracter√≠sticas de acessibilidade"""
        return {
            'wheelchair', 'tactile_paving', 'kerb', 'ramp',
            'elevator', 'accessible_entrance', 'audio_signals'
        }
    
    def _load_geographic_landmarks(self) -> Dict[str, Tuple[float, float]]:
        """Carrega marcos geogr√°ficos de SP"""
        return {
            'centro_sp': (-23.5505, -46.6333),
            'paulista': (-23.5614, -46.6565),
            'ibirapuera': (-23.5874, -46.6576),
            'vila_madalena': (-23.5469, -46.6932),
            'pinheiros': (-23.5679, -46.6969)
        }
    
    async def validate_gtfs_data(self, gtfs_data: Dict[str, Any]) -> ValidationResult:
        """Valida dados GTFS de S√£o Paulo"""
        logger.info("üîç Validando dados GTFS de S√£o Paulo...")
        result = ValidationResult()
        
        try:
            # Validar estrutura b√°sica
            await self._validate_gtfs_structure(gtfs_data, result)
            
            # Validar paradas
            if 'stops' in gtfs_data:
                await self._validate_gtfs_stops(gtfs_data['stops'], result)
            
            # Validar rotas
            if 'routes' in gtfs_data:
                await self._validate_gtfs_routes(gtfs_data['routes'], result)
            
            # Validar viagens
            if 'trips' in gtfs_data:
                await self._validate_gtfs_trips(gtfs_data['trips'], result)
            
            # Validar hor√°rios
            if 'stop_times' in gtfs_data:
                await self._validate_gtfs_stop_times(gtfs_data['stop_times'], result)
            
            # Calcular score final
            result.calculate_score()
            
            # Atualizar estat√≠sticas
            self._update_validation_stats(result)
            
            logger.info(f"‚úÖ Valida√ß√£o GTFS conclu√≠da - Score: {result.score:.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o GTFS: {e}")
            result.add_error(f"Erro na valida√ß√£o GTFS: {str(e)}")
        
        return result
    
    async def validate_osm_data(self, osm_data: Dict[str, Any]) -> ValidationResult:
        """Valida dados OSM de S√£o Paulo"""
        logger.info("üîç Validando dados OSM de S√£o Paulo...")
        result = ValidationResult()
        
        try:
            # Validar estrutura b√°sica
            await self._validate_osm_structure(osm_data, result)
            
            # Validar n√≥s
            if 'nodes' in osm_data:
                await self._validate_osm_nodes(osm_data['nodes'], result)
            
            # Validar vias
            if 'ways' in osm_data:
                await self._validate_osm_ways(osm_data['ways'], result)
            
            # Validar rela√ß√µes
            if 'relations' in osm_data:
                await self._validate_osm_relations(osm_data['relations'], result)
            
            # Validar acessibilidade
            await self._validate_accessibility_data(osm_data, result)
            
            # Calcular score final
            result.calculate_score()
            
            # Atualizar estat√≠sticas
            self._update_validation_stats(result)
            
            logger.info(f"‚úÖ Valida√ß√£o OSM conclu√≠da - Score: {result.score:.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o OSM: {e}")
            result.add_error(f"Erro na valida√ß√£o OSM: {str(e)}")
        
        return result
    
    async def validate_integrated_data(self, integrated_data: Dict[str, Any]) -> ValidationResult:
        """Valida dados integrados"""
        logger.info("üîç Validando dados integrados...")
        result = ValidationResult()
        
        try:
            # Validar estrutura
            await self._validate_integrated_structure(integrated_data, result)
            
            # Validar n√≥s integrados
            if 'nodes' in integrated_data:
                await self._validate_integrated_nodes(integrated_data['nodes'], result)
            
            # Validar arestas integradas
            if 'edges' in integrated_data:
                await self._validate_integrated_edges(integrated_data['edges'], result)
            
            # Validar consist√™ncia
            await self._validate_data_consistency(integrated_data, result)
            
            # Calcular score final
            result.calculate_score()
            
            # Atualizar estat√≠sticas
            self._update_validation_stats(result)
            
            logger.info(f"‚úÖ Valida√ß√£o integrada conclu√≠da - Score: {result.score:.2f}")
            
        except Exception as e:
            logger.error(f"‚ùå Erro na valida√ß√£o integrada: {e}")
            result.add_error(f"Erro na valida√ß√£o integrada: {str(e)}")
        
        return result
    
    async def _validate_gtfs_structure(self, gtfs_data: Dict[str, Any], result: ValidationResult):
        """Valida estrutura dos dados GTFS"""
        required_files = ['stops', 'routes', 'trips', 'stop_times']
        
        for file_name in required_files:
            if file_name not in gtfs_data:
                result.add_error(f"Arquivo GTFS obrigat√≥rio ausente: {file_name}")
            elif not gtfs_data[file_name]:
                result.add_warning(f"Arquivo GTFS vazio: {file_name}")
            else:
                result.add_info(f"Arquivo GTFS presente: {file_name}")
    
    async def _validate_gtfs_stops(self, stops: List[Dict[str, Any]], result: ValidationResult):
        """Valida paradas GTFS"""
        if not stops:
            result.add_error("Nenhuma parada encontrada")
            return
        
        result.add_info(f"Total de paradas: {len(stops)}")
        
        valid_stops = 0
        for stop in stops:
            if self._validate_single_stop(stop, result):
                valid_stops += 1
        
        result.add_info(f"Paradas v√°lidas: {valid_stops}/{len(stops)}")
        
        # Verificar distribui√ß√£o geogr√°fica
        await self._validate_geographic_distribution(stops, result)
    
    def _validate_single_stop(self, stop: Dict[str, Any], result: ValidationResult) -> bool:
        """Valida uma √∫nica parada"""
        is_valid = True
        
        # Verificar campos obrigat√≥rios
        required_fields = self.gtfs_validation_config['required_stop_fields']
        for field in required_fields:
            if field not in stop or not stop[field]:
                result.add_error(f"Campo obrigat√≥rio ausente na parada {stop.get('stop_id', 'unknown')}: {field}")
                is_valid = False
        
        # Verificar coordenadas
        if 'stop_lat' in stop and 'stop_lon' in stop:
            lat, lon = float(stop['stop_lat']), float(stop['stop_lon'])
            
            if not self.sp_bounds.contains(lat, lon):
                result.add_error(f"Parada {stop.get('stop_id', 'unknown')} fora dos limites de SP: ({lat}, {lon})")
                is_valid = False
            
            # Verificar precis√£o das coordenadas
            if not self._validate_coordinate_precision(lat, lon):
                result.add_warning(f"Coordenadas imprecisas para parada {stop.get('stop_id', 'unknown')}")
        
        # Verificar nome da parada
        if 'stop_name' in stop:
            stop_name = stop['stop_name']
            if len(stop_name) < self.gtfs_validation_config['min_stop_name_length']:
                result.add_warning(f"Nome de parada muito curto: {stop_name}")
            
            # Verificar se √© uma parada conhecida
            if any(known in stop_name for known in self.reference_data['known_stops']):
                result.add_info(f"Parada conhecida identificada: {stop_name}")
        
        return is_valid
    
    def _validate_coordinate_precision(self, lat: float, lon: float) -> bool:
        """Valida precis√£o das coordenadas"""
        # Verificar se coordenadas n√£o s√£o muito redondas (indicando imprecis√£o)
        lat_decimal = lat % 0.001
        lon_decimal = lon % 0.001
        
        return lat_decimal != 0.0 or lon_decimal != 0.0
    
    async def _validate_geographic_distribution(self, stops: List[Dict[str, Any]], result: ValidationResult):
        """Valida distribui√ß√£o geogr√°fica das paradas"""
        if not stops:
            return
        
        # Calcular centroide
        total_lat = sum(float(stop.get('stop_lat', 0)) for stop in stops)
        total_lon = sum(float(stop.get('stop_lon', 0)) for stop in stops)
        center_lat = total_lat / len(stops)
        center_lon = total_lon / len(stops)
        
        # Verificar se centroide est√° pr√≥ximo ao centro de SP
        sp_center = (-23.5505, -46.6333)
        distance = self._calculate_distance(center_lat, center_lon, sp_center[0], sp_center[1])
        
        if distance > 20:  # 20km do centro
            result.add_warning(f"Distribui√ß√£o geogr√°fica suspeita - centroide a {distance:.1f}km do centro de SP")
        else:
            result.add_info(f"Distribui√ß√£o geogr√°fica adequada - centroide a {distance:.1f}km do centro de SP")
    
    async def _validate_gtfs_routes(self, routes: List[Dict[str, Any]], result: ValidationResult):
        """Valida rotas GTFS"""
        if not routes:
            result.add_error("Nenhuma rota encontrada")
            return
        
        result.add_info(f"Total de rotas: {len(routes)}")
        
        valid_routes = 0
        for route in routes:
            if self._validate_single_route(route, result):
                valid_routes += 1
        
        result.add_info(f"Rotas v√°lidas: {valid_routes}/{len(routes)}")
    
    def _validate_single_route(self, route: Dict[str, Any], result: ValidationResult) -> bool:
        """Valida uma √∫nica rota"""
        is_valid = True
        
        # Verificar campos obrigat√≥rios
        required_fields = self.gtfs_validation_config['required_route_fields']
        for field in required_fields:
            if field not in route or not route[field]:
                result.add_error(f"Campo obrigat√≥rio ausente na rota {route.get('route_id', 'unknown')}: {field}")
                is_valid = False
        
        # Verificar se √© uma rota conhecida
        route_name = route.get('route_short_name', '') + route.get('route_long_name', '')
        if any(known in route_name for known in self.reference_data['known_routes']):
            result.add_info(f"Rota conhecida identificada: {route_name}")
        
        return is_valid
    
    async def _validate_gtfs_trips(self, trips: List[Dict[str, Any]], result: ValidationResult):
        """Valida viagens GTFS"""
        if not trips:
            result.add_warning("Nenhuma viagem encontrada")
            return
        
        result.add_info(f"Total de viagens: {len(trips)}")
    
    async def _validate_gtfs_stop_times(self, stop_times: List[Dict[str, Any]], result: ValidationResult):
        """Valida hor√°rios GTFS"""
        if not stop_times:
            result.add_warning("Nenhum hor√°rio encontrado")
            return
        
        result.add_info(f"Total de hor√°rios: {len(stop_times)}")
    
    async def _validate_osm_structure(self, osm_data: Dict[str, Any], result: ValidationResult):
        """Valida estrutura dos dados OSM"""
        if 'nodes' not in osm_data and 'ways' not in osm_data:
            result.add_error("Nenhum dado OSM encontrado (n√≥s ou vias)")
            return
        
        if 'nodes' in osm_data:
            result.add_info(f"Total de n√≥s OSM: {len(osm_data['nodes'])}")
        
        if 'ways' in osm_data:
            result.add_info(f"Total de vias OSM: {len(osm_data['ways'])}")
    
    async def _validate_osm_nodes(self, nodes: List[Dict[str, Any]], result: ValidationResult):
        """Valida n√≥s OSM"""
        if not nodes:
            result.add_warning("Nenhum n√≥ OSM encontrado")
            return
        
        valid_nodes = 0
        for node in nodes:
            if self._validate_single_osm_node(node, result):
                valid_nodes += 1
        
        result.add_info(f"N√≥s OSM v√°lidos: {valid_nodes}/{len(nodes)}")
    
    def _validate_single_osm_node(self, node: Dict[str, Any], result: ValidationResult) -> bool:
        """Valida um √∫nico n√≥ OSM"""
        is_valid = True
        
        # Verificar coordenadas
        if 'lat' in node and 'lon' in node:
            lat, lon = float(node['lat']), float(node['lon'])
            
            if not self.sp_bounds.contains(lat, lon):
                result.add_warning(f"N√≥ OSM {node.get('id', 'unknown')} fora dos limites de SP")
                is_valid = False
        
        return is_valid
    
    async def _validate_osm_ways(self, ways: List[Dict[str, Any]], result: ValidationResult):
        """Valida vias OSM"""
        if not ways:
            result.add_warning("Nenhuma via OSM encontrada")
            return
        
        valid_ways = 0
        for way in ways:
            if self._validate_single_osm_way(way, result):
                valid_ways += 1
        
        result.add_info(f"Vias OSM v√°lidas: {valid_ways}/{len(ways)}")
    
    def _validate_single_osm_way(self, way: Dict[str, Any], result: ValidationResult) -> bool:
        """Valida uma √∫nica via OSM"""
        is_valid = True
        
        # Verificar tags obrigat√≥rias
        tags = way.get('tags', {})
        required_tags = self.osm_validation_config['required_way_tags']
        
        for tag in required_tags:
            if tag not in tags:
                result.add_warning(f"Via OSM {way.get('id', 'unknown')} sem tag obrigat√≥ria: {tag}")
                is_valid = False
        
        # Verificar tags de acessibilidade
        accessibility_tags = self.osm_validation_config['accessibility_tags']
        has_accessibility = any(tag in tags for tag in accessibility_tags)
        
        if has_accessibility:
            result.add_info(f"Via OSM {way.get('id', 'unknown')} com dados de acessibilidade")
        
        return is_valid
    
    async def _validate_osm_relations(self, relations: List[Dict[str, Any]], result: ValidationResult):
        """Valida rela√ß√µes OSM"""
        if not relations:
            result.add_info("Nenhuma rela√ß√£o OSM encontrada")
            return
        
        result.add_info(f"Total de rela√ß√µes OSM: {len(relations)}")
    
    async def _validate_accessibility_data(self, osm_data: Dict[str, Any], result: ValidationResult):
        """Valida dados de acessibilidade"""
        accessibility_features = self.reference_data['accessibility_features']
        found_features = set()
        
        # Verificar em vias
        if 'ways' in osm_data:
            for way in osm_data['ways']:
                tags = way.get('tags', {})
                for feature in accessibility_features:
                    if feature in tags:
                        found_features.add(feature)
        
        result.add_info(f"Caracter√≠sticas de acessibilidade encontradas: {len(found_features)}")
        
        if found_features:
            result.add_info(f"Features: {', '.join(found_features)}")
        else:
            result.add_warning("Nenhuma caracter√≠stica de acessibilidade encontrada")
    
    async def _validate_integrated_structure(self, integrated_data: Dict[str, Any], result: ValidationResult):
        """Valida estrutura dos dados integrados"""
        required_fields = ['nodes', 'edges']
        
        for field in required_fields:
            if field not in integrated_data:
                result.add_error(f"Campo obrigat√≥rio ausente nos dados integrados: {field}")
            elif not integrated_data[field]:
                result.add_warning(f"Campo vazio nos dados integrados: {field}")
            else:
                result.add_info(f"Campo presente nos dados integrados: {field}")
    
    async def _validate_integrated_nodes(self, nodes: List[Dict[str, Any]], result: ValidationResult):
        """Valida n√≥s integrados"""
        if not nodes:
            result.add_error("Nenhum n√≥ integrado encontrado")
            return
        
        result.add_info(f"Total de n√≥s integrados: {len(nodes)}")
        
        # Verificar tipos de n√≥s
        node_types = {}
        for node in nodes:
            node_type = node.get('type', 'unknown')
            node_types[node_type] = node_types.get(node_type, 0) + 1
        
        for node_type, count in node_types.items():
            result.add_info(f"N√≥s do tipo {node_type}: {count}")
    
    async def _validate_integrated_edges(self, edges: List[Dict[str, Any]], result: ValidationResult):
        """Valida arestas integradas"""
        if not edges:
            result.add_error("Nenhuma aresta integrada encontrada")
            return
        
        result.add_info(f"Total de arestas integradas: {len(edges)}")
        
        # Verificar tipos de arestas
        edge_types = {}
        for edge in edges:
            edge_type = edge.get('type', 'unknown')
            edge_types[edge_type] = edge_types.get(edge_type, 0) + 1
        
        for edge_type, count in edge_types.items():
            result.add_info(f"Arestas do tipo {edge_type}: {count}")
    
    async def _validate_data_consistency(self, integrated_data: Dict[str, Any], result: ValidationResult):
        """Valida consist√™ncia dos dados integrados"""
        nodes = integrated_data.get('nodes', [])
        edges = integrated_data.get('edges', [])
        
        if not nodes or not edges:
            result.add_warning("Dados insuficientes para verificar consist√™ncia")
            return
        
        # Verificar se arestas referenciam n√≥s existentes
        node_ids = {node.get('id') for node in nodes}
        invalid_edges = 0
        
        for edge in edges:
            from_node = edge.get('from_node')
            to_node = edge.get('to_node')
            
            if from_node not in node_ids or to_node not in node_ids:
                invalid_edges += 1
        
        if invalid_edges > 0:
            result.add_warning(f"Arestas com refer√™ncias inv√°lidas: {invalid_edges}")
        else:
            result.add_info("Todas as arestas t√™m refer√™ncias v√°lidas")
    
    def _calculate_distance(self, lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """Calcula dist√¢ncia entre duas coordenadas (em km)"""
        R = 6371  # Raio da Terra em km
        
        dlat = math.radians(lat2 - lat1)
        dlon = math.radians(lon2 - lon1)
        
        a = (math.sin(dlat/2) * math.sin(dlat/2) + 
             math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * 
             math.sin(dlon/2) * math.sin(dlon/2))
        
        c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
        
        return R * c
    
    def _update_validation_stats(self, result: ValidationResult):
        """Atualiza estat√≠sticas de valida√ß√£o"""
        self.validation_stats['total_validations'] += 1
        
        if result.valid:
            self.validation_stats['successful_validations'] += 1
        else:
            self.validation_stats['failed_validations'] += 1
        
        # Atualizar score m√©dio
        total = self.validation_stats['total_validations']
        current_avg = self.validation_stats['avg_score']
        self.validation_stats['avg_score'] = (current_avg * (total - 1) + result.score) / total
    
    def get_validation_stats(self) -> Dict[str, Any]:
        """Retorna estat√≠sticas de valida√ß√£o"""
        return {
            'total_validations': self.validation_stats['total_validations'],
            'successful_validations': self.validation_stats['successful_validations'],
            'failed_validations': self.validation_stats['failed_validations'],
            'success_rate': (
                self.validation_stats['successful_validations'] / 
                max(1, self.validation_stats['total_validations'])
            ),
            'avg_score': self.validation_stats['avg_score'],
            'validation_level': self.validation_level.value,
            'active_rules': len([rule for rule in self.validation_rules if rule.enabled])
        }
    
    def get_validation_rules(self) -> List[Dict[str, Any]]:
        """Retorna regras de valida√ß√£o"""
        return [
            {
                'name': rule.name,
                'description': rule.description,
                'level': rule.level.value,
                'weight': rule.weight,
                'enabled': rule.enabled
            }
            for rule in self.validation_rules
        ]
    
    def update_validation_level(self, level: ValidationLevel):
        """Atualiza n√≠vel de valida√ß√£o"""
        self.validation_level = level
        logger.info(f"üìù N√≠vel de valida√ß√£o atualizado para: {level.value}")
    
    def enable_validation_rule(self, rule_name: str):
        """Habilita regra de valida√ß√£o"""
        for rule in self.validation_rules:
            if rule.name == rule_name:
                rule.enabled = True
                logger.info(f"üìù Regra de valida√ß√£o habilitada: {rule_name}")
                return
        
        logger.warning(f"‚ö†Ô∏è Regra de valida√ß√£o n√£o encontrada: {rule_name}")
    
    def disable_validation_rule(self, rule_name: str):
        """Desabilita regra de valida√ß√£o"""
        for rule in self.validation_rules:
            if rule.name == rule_name:
                rule.enabled = False
                logger.info(f"üìù Regra de valida√ß√£o desabilitada: {rule_name}")
                return
        
        logger.warning(f"‚ö†Ô∏è Regra de valida√ß√£o n√£o encontrada: {rule_name}")
